class Gato:
    def __init__(self):
        # Inicializa un tablero de 3x3 con espacios vacíos
        self.tablero = [[' ' for _ in range(3)] for _ in range(3)]
        # El primer jugador es 'X'
        self.turno = 'X'

    def __repr__(self):
        # Representación del tablero actual
        return '\n'.join([' | '.join(row) for row in self.tablero])

    def hacer_movimiento(self, fila, columna):
        # Coloca el símbolo del jugador actual en el tablero si la casilla está vacía
        if self.tablero[fila][columna] == ' ':
            self.tablero[fila][columna] = self.turno
            # Cambia el turno al otro jugador
            self.turno = 'O' if self.turno == 'X' else 'X'
        else:
            print("Movimiento inválido. Inténtalo de nuevo.")

    def hay_ganador(self, tablero):
        # Revisa si hay 3 símbolos iguales en línea
        lineas = (
            tablero[0], tablero[1], tablero[2],
            [tablero[i][0] for i in range(3)],
            [tablero[i][1] for i in range(3)],
            [tablero[i][2] for i in range(3)],
            [tablero[i][i] for i in range(3)],
            [tablero[i][2 - i] for i in range(3)]
        )
        for linea in lineas:
            if linea == ['X', 'X', 'X'] or linea == ['O', 'O', 'O']:
                return True
        return False

    def tablero_lleno(self, tablero):
        # Revisa si el tablero está completamente lleno
        return all(casilla != ' ' for fila in tablero for casilla in fila)

    def juego_terminado(self):
        # Verifica si el juego ha terminado porque hay un ganador o el tablero está lleno
        return self.hay_ganador(self.tablero) or self.tablero_lleno(self.tablero)

class JugadorHumano:
    def __init__(self, simbolo):
        # Inicializa al jugador humano con su símbolo asignado
        self.simbolo = simbolo

    def hacer_movimiento(self):
        # El jugador humano ingresa la posición donde quiere jugar
        fila = int(input("Ingrese la fila (0-2): "))
        columna = int(input("Ingrese la columna (0-2): "))
        return fila, columna

class JugadorComputadora:
    def __init__(self, simbolo):
        # Inicializa al jugador computadora con su símbolo asignado
        self.simbolo = simbolo
        self.simbolo_oponente = 'O' if simbolo == 'X' else 'X'

    def hacer_movimiento(self, tablero):
        # Utiliza el algoritmo minimax para encontrar el mejor movimiento
        _, mejor_movimiento = self.minimax(tablero, self.simbolo)
        return mejor_movimiento

    def minimax(self, tablero, jugador_actual):
        # Implementación del algoritmo minimax para determinar el mejor movimiento
        if gato.hay_ganador(tablero):
            # Retorna puntuación positiva si gana el oponente, negativa si gana el jugador de la IA
            return (1 if jugador_actual == self.simbolo_oponente else -1), None
        elif gato.tablero_lleno(tablero):
            # Retorna 0 si hay un empate
            return 0, None

        if jugador_actual == self.simbolo:
            mejor_puntuacion = float('-inf')
        else:
            mejor_puntuacion = float('inf')
        mejor_movimiento = None

        for fila in range(3):
            for columna in range(3):
                if tablero[fila][columna] == ' ':
                    # Prueba el movimiento
                    tablero[fila][columna] = jugador_actual
                    puntuacion, _ = self.minimax(tablero, self.simbolo_oponente if jugador_actual == self.simbolo else self.simbolo)
                    # Deshace el movimiento
                    tablero[fila][columna] = ' '
                    # Evalúa el movimiento
                    if jugador_actual == self.simbolo:
                        if puntuacion > mejor_puntuacion:
                            mejor_puntuacion = puntuacion
                            mejor_movimiento = (fila, columna)
                    else:
                        if puntuacion < mejor_puntuacion:
                            mejor_puntuacion = puntuacion
                            mejor_movimiento = (fila, columna)

        return mejor_puntuacion, mejor_movimiento

def jugar():
    global gato
    gato = Gato()
    jugadores = [JugadorHumano('X'), JugadorComputadora('O')]
    turno_actual = 0

    while not gato.juego_terminado():
        print(gato)
        jugador_actual = jugadores[turno_actual % 2]

        if isinstance(jugador_actual, JugadorHumano):
            fila, columna = jugador_actual.hacer_movimiento()
        else:
            fila, columna = jugador_actual.hacer_movimiento(gato.tablero)

        gato.hacer_movimiento(fila, columna)

        if gato.hay_ganador(gato.tablero):
            print(f"Jugador {jugador_actual.simbolo} ha ganado!")
            break
        elif gato.tablero_lleno(gato.tablero):
            print("Empate!")
            break

        turno_actual += 1

    print(gato)

jugar()
